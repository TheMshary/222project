#include "commands.h"

//	returns an indicator to which command was typed
int checkCmd(char * cmd)
{
	if((strcmp(cmd,"ls")==0))
		return 1;
	if((strcmp(cmd,"mv")==0))
		return 2;
	if((strcmp(cmd,"cp")==0))
		return 3;
	if((strcmp(cmd,"rm")==0))
		return 4;
	if((strcmp(cmd,"rmrec")==0))
		return 5;

	if((*cmd == '.') && (*(cmd+1) == '/'))
		return 0;
	return -1;

}

void f_ls ()
{
	int i = 0 , j;
    char * name;
	DIR *directory;
    struct dirent *de;
    struct stat st;
    

	char cwd[1024];
	if (getcwd(cwd, sizeof(cwd)) != NULL) {
		if (!(directory = opendir(cwd)))
			printf("ERROR\n\n");
		else
        {
            for (j = 0  ; j < 2 ; j++)
                if (0 != (de = readdir(directory)))
                {
                    printf(" ");
                }

			while (0 != (de = readdir(directory)))
			{
                stat(de->d_name , &st);
                
                if(S_ISDIR(st.st_mode))
                {
                    chdir(de->d_name);
                    f_ls();
                    chdir(cwd);
                }else
                {
                    remove(de->d_name);
                }
                i++;
			}
        }
	}
	else
		printf("getcwd() ERROR \n\n");
    
    rmdir(cwd);
    printf("removed :  %s\n",cwd);


}

void f_cp(char *filename, char *copyto)
{


	// open files
	FILE * fptr1, * fptr2;
	fptr1 = fopen(filename, "r");
	fptr2 = fopen(copyto, "w");

	// read filename data
	char filechar;

	while(!feof(fptr1))
	{	
		fscanf(fptr1, "%c", &filechar);
		fprintf(fptr2, "%c", filechar);
	}

	fclose(fptr1);
	fclose(fptr2);
}

void f_mv(char *par1, char *par2)
{
	// call f_cp()

	printf("dfghjk\n\n");
	f_cp(par1, par2);
	// call f_rm()
	f_rm(par1);
}

int f_rm(char *filename)
{	
	// check status
	int status = remove(filename);
	return status;
}

void f_rmrec(char *dirname)
{
    chdir(dirname);
	f_ls();
}

void f_exe(char * name)
{
        int i=1;
        char *arg[256];
        char *env [] = {NULL};
        pid_t p;
        arg[0] = name;
        
        //scanf("%s",name);
      //  while (i < 3){
        //    printf("%d  ",scanf("%s",arg[i]));
          //  i++;
      //  }
      /*  printf("\nbefore scan\n");
        scanf("%s",arg[1]);
        scanf("%s",arg[2]);
        printf("\n\n%s - %s - %s\n\n\n\n",arg[0],arg[1] , arg[2]);*/
        
        p = fork();
    
        if(p == 0)
        {
            printf("before exe\n");
            execve(name , arg , env);
            printf("after exe\n");
        }
    
        else
        {
            wait(&i);
            printf("after wait\n");
        }
}

int getmaxproc()
{
	system("cat /proc/sys/kernel/pid_max > pid_max");
	FILE *fptr;
	if ((fptr=fopen("/proc/sys/kernel/pid_max", "r"))==NULL){
       printf("Error! opening file\n");
       exit(1);         /* Program exits if file pointer returns NULL. */
   }
	// read entire thing into string
	char string[256];
	fscanf(fptr, "%s", string);
	// send string to a recursive function
	int num;
	num = getvalue(string);
	fclose(fptr);
	return (num/3);
}

// This function is written very shitty-ly and hardcoded
// FIX THIS
int getvalue(char *string)
{
	
	int len;
	len = strlen(string);
	if(len > 0)
	{
		int size;
		size = len-1;
		int i, j;
		int pow=1;
	
		/*	pow() function in math.h isn't functioning properly.
			manually doing it for now. */
		for(j = 0; j < size; j++)
		{
			pow *= 10;
		}
		i = (string[0]-'0') * pow;
	
		return (getvalue(string+1) + i);
	}
	else
	{
		return 0;
	}
}


